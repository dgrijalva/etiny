%%
%% Autogenerated by Thrift
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(cassandra_thrift).
-behaviour(thrift_service).


-include("cassandra_thrift.hrl").

-export([struct_info/1, function_info/2]).

struct_info('i am a dummy struct') -> undefined.
%%% interface
% login(This, Keyspace, Auth_request)
function_info('login', params_type) ->
  {struct, [{1, string},
  {2, {struct, {'cassandra_types', 'authenticationRequest'}}}]}
;
function_info('login', reply_type) ->
  {struct, []};
function_info('login', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'authenticationException'}}},
  {2, {struct, {'cassandra_types', 'authorizationException'}}}]}
;
% get(This, Keyspace, Key, Column_path, Consistency_level)
function_info('get', params_type) ->
  {struct, [{1, string},
  {2, string},
  {3, {struct, {'cassandra_types', 'columnPath'}}},
  {4, i32}]}
;
function_info('get', reply_type) ->
  {struct, {'cassandra_types', 'columnOrSuperColumn'}};
function_info('get', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'invalidRequestException'}}},
  {2, {struct, {'cassandra_types', 'notFoundException'}}},
  {3, {struct, {'cassandra_types', 'unavailableException'}}},
  {4, {struct, {'cassandra_types', 'timedOutException'}}}]}
;
% get_slice(This, Keyspace, Key, Column_parent, Predicate, Consistency_level)
function_info('get_slice', params_type) ->
  {struct, [{1, string},
  {2, string},
  {3, {struct, {'cassandra_types', 'columnParent'}}},
  {4, {struct, {'cassandra_types', 'slicePredicate'}}},
  {5, i32}]}
;
function_info('get_slice', reply_type) ->
  {list, {struct, {'cassandra_types', 'columnOrSuperColumn'}}};
function_info('get_slice', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'invalidRequestException'}}},
  {2, {struct, {'cassandra_types', 'unavailableException'}}},
  {3, {struct, {'cassandra_types', 'timedOutException'}}}]}
;
% multiget(This, Keyspace, Keys, Column_path, Consistency_level)
function_info('multiget', params_type) ->
  {struct, [{1, string},
  {2, {list, string}},
  {3, {struct, {'cassandra_types', 'columnPath'}}},
  {4, i32}]}
;
function_info('multiget', reply_type) ->
  {map, string, {struct, {'cassandra_types', 'columnOrSuperColumn'}}};
function_info('multiget', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'invalidRequestException'}}},
  {2, {struct, {'cassandra_types', 'unavailableException'}}},
  {3, {struct, {'cassandra_types', 'timedOutException'}}}]}
;
% multiget_slice(This, Keyspace, Keys, Column_parent, Predicate, Consistency_level)
function_info('multiget_slice', params_type) ->
  {struct, [{1, string},
  {2, {list, string}},
  {3, {struct, {'cassandra_types', 'columnParent'}}},
  {4, {struct, {'cassandra_types', 'slicePredicate'}}},
  {5, i32}]}
;
function_info('multiget_slice', reply_type) ->
  {map, string, {list, {struct, {'cassandra_types', 'columnOrSuperColumn'}}}};
function_info('multiget_slice', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'invalidRequestException'}}},
  {2, {struct, {'cassandra_types', 'unavailableException'}}},
  {3, {struct, {'cassandra_types', 'timedOutException'}}}]}
;
% get_count(This, Keyspace, Key, Column_parent, Consistency_level)
function_info('get_count', params_type) ->
  {struct, [{1, string},
  {2, string},
  {3, {struct, {'cassandra_types', 'columnParent'}}},
  {4, i32}]}
;
function_info('get_count', reply_type) ->
  i32;
function_info('get_count', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'invalidRequestException'}}},
  {2, {struct, {'cassandra_types', 'unavailableException'}}},
  {3, {struct, {'cassandra_types', 'timedOutException'}}}]}
;
% get_range_slice(This, Keyspace, Column_parent, Predicate, Start_key, Finish_key, Row_count, Consistency_level)
function_info('get_range_slice', params_type) ->
  {struct, [{1, string},
  {2, {struct, {'cassandra_types', 'columnParent'}}},
  {3, {struct, {'cassandra_types', 'slicePredicate'}}},
  {4, string},
  {5, string},
  {6, i32},
  {7, i32}]}
;
function_info('get_range_slice', reply_type) ->
  {list, {struct, {'cassandra_types', 'keySlice'}}};
function_info('get_range_slice', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'invalidRequestException'}}},
  {2, {struct, {'cassandra_types', 'unavailableException'}}},
  {3, {struct, {'cassandra_types', 'timedOutException'}}}]}
;
% get_range_slices(This, Keyspace, Column_parent, Predicate, Range, Consistency_level)
function_info('get_range_slices', params_type) ->
  {struct, [{1, string},
  {2, {struct, {'cassandra_types', 'columnParent'}}},
  {3, {struct, {'cassandra_types', 'slicePredicate'}}},
  {4, {struct, {'cassandra_types', 'keyRange'}}},
  {5, i32}]}
;
function_info('get_range_slices', reply_type) ->
  {list, {struct, {'cassandra_types', 'keySlice'}}};
function_info('get_range_slices', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'invalidRequestException'}}},
  {2, {struct, {'cassandra_types', 'unavailableException'}}},
  {3, {struct, {'cassandra_types', 'timedOutException'}}}]}
;
% insert(This, Keyspace, Key, Column_path, Value, Timestamp, Consistency_level)
function_info('insert', params_type) ->
  {struct, [{1, string},
  {2, string},
  {3, {struct, {'cassandra_types', 'columnPath'}}},
  {4, string},
  {5, i64},
  {6, i32}]}
;
function_info('insert', reply_type) ->
  {struct, []};
function_info('insert', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'invalidRequestException'}}},
  {2, {struct, {'cassandra_types', 'unavailableException'}}},
  {3, {struct, {'cassandra_types', 'timedOutException'}}}]}
;
% batch_insert(This, Keyspace, Key, Cfmap, Consistency_level)
function_info('batch_insert', params_type) ->
  {struct, [{1, string},
  {2, string},
  {3, {map, string, {list, {struct, {'cassandra_types', 'columnOrSuperColumn'}}}}},
  {4, i32}]}
;
function_info('batch_insert', reply_type) ->
  {struct, []};
function_info('batch_insert', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'invalidRequestException'}}},
  {2, {struct, {'cassandra_types', 'unavailableException'}}},
  {3, {struct, {'cassandra_types', 'timedOutException'}}}]}
;
% remove(This, Keyspace, Key, Column_path, Timestamp, Consistency_level)
function_info('remove', params_type) ->
  {struct, [{1, string},
  {2, string},
  {3, {struct, {'cassandra_types', 'columnPath'}}},
  {4, i64},
  {5, i32}]}
;
function_info('remove', reply_type) ->
  {struct, []};
function_info('remove', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'invalidRequestException'}}},
  {2, {struct, {'cassandra_types', 'unavailableException'}}},
  {3, {struct, {'cassandra_types', 'timedOutException'}}}]}
;
% batch_mutate(This, Keyspace, Mutation_map, Consistency_level)
function_info('batch_mutate', params_type) ->
  {struct, [{1, string},
  {2, {map, string, {map, string, {list, {struct, {'cassandra_types', 'mutation'}}}}}},
  {3, i32}]}
;
function_info('batch_mutate', reply_type) ->
  {struct, []};
function_info('batch_mutate', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'invalidRequestException'}}},
  {2, {struct, {'cassandra_types', 'unavailableException'}}},
  {3, {struct, {'cassandra_types', 'timedOutException'}}}]}
;
% get_string_property(This, Property)
function_info('get_string_property', params_type) ->
  {struct, [{1, string}]}
;
function_info('get_string_property', reply_type) ->
  string;
function_info('get_string_property', exceptions) ->
  {struct, []}
;
% get_string_list_property(This, Property)
function_info('get_string_list_property', params_type) ->
  {struct, [{1, string}]}
;
function_info('get_string_list_property', reply_type) ->
  {list, string};
function_info('get_string_list_property', exceptions) ->
  {struct, []}
;
% describe_keyspaces(This)
function_info('describe_keyspaces', params_type) ->
  {struct, []}
;
function_info('describe_keyspaces', reply_type) ->
  {set, string};
function_info('describe_keyspaces', exceptions) ->
  {struct, []}
;
% describe_cluster_name(This)
function_info('describe_cluster_name', params_type) ->
  {struct, []}
;
function_info('describe_cluster_name', reply_type) ->
  string;
function_info('describe_cluster_name', exceptions) ->
  {struct, []}
;
% describe_version(This)
function_info('describe_version', params_type) ->
  {struct, []}
;
function_info('describe_version', reply_type) ->
  string;
function_info('describe_version', exceptions) ->
  {struct, []}
;
% describe_ring(This, Keyspace)
function_info('describe_ring', params_type) ->
  {struct, [{1, string}]}
;
function_info('describe_ring', reply_type) ->
  {list, {struct, {'cassandra_types', 'tokenRange'}}};
function_info('describe_ring', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'invalidRequestException'}}}]}
;
% describe_keyspace(This, Keyspace)
function_info('describe_keyspace', params_type) ->
  {struct, [{1, string}]}
;
function_info('describe_keyspace', reply_type) ->
  {map, string, {map, string, string}};
function_info('describe_keyspace', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'notFoundException'}}}]}
;
% describe_splits(This, Start_token, End_token, Keys_per_split)
function_info('describe_splits', params_type) ->
  {struct, [{1, string},
  {2, string},
  {3, i32}]}
;
function_info('describe_splits', reply_type) ->
  {list, string};
function_info('describe_splits', exceptions) ->
  {struct, []}
;
function_info(xxx, dummy) -> dummy.

